<!doctype html>
<meta charset="utf8">
<link rel="stylesheet" href="./spec.css">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/8.4/styles/github.min.css">
<script src="./spec.js"></script>
<pre class="metadata">
title: Dynamic Code Brand Checks
stage: 1
contributors: Krzysztof Kotowicz, Mike Samuel
</pre>

<p>
See also the
<a href="https://github.com/tc39/dynamic-code-brand-checks">explainer</a>.</p>

<h2>Background</h2>

<p>The <a href="https://w3c.github.com/webappsec-trusted-types/">Trusted Types proposal</a>
(<a href="https://docs.google.com/presentation/d/e/2PACX-1vQCbxmHKjPWUq7MC91x6tJKanFYU2i9Z13wwfkngcseHt96EfU_xyA0awkxb4SoNW3hQ3S2z-ByX0T9/pub?start=false&loop=false&delayms=60000">explainer for TC39</a>)
seeks to guard risky operations like dynamic code evaluation by requiring
that code portions have a runtime type that indicates that they have
been explicitly trusted.</p>

<p>Specifically, when Trusted Types enforcement is turned on, it would like to ensure
that arguments to <code>eval(x)</code> and <code>new Function(x)</code> are
(or are convertible to)
<a href="https://w3c.github.io/webappsec-trusted-types/dist/spec/#typedef-trustedscript">TrustedScript</a>.
This enhances the existing dynamic code evaluation guards that the web platform already controls with <a href="https://w3c.github.io/webappsec-csp/">Content Security Policy</a>.</p>

<h3>Problem 1: %eval% does not accept objects in lieu of strings for code</h3>

<p>PerformEval exits early when its argument is not a string.</p>

<emu-alg>
  2. If Type(_x_) is not String, return _x_.
</emu-alg>

<p>This proposal relaxes the "Type(x) is String" requirement for inputs to `eval`
to enable restricting dynamic code loading to values that have been
attested to previously.</p>

<ul>
 <li>Adds an algorithm, <emu-xref aoid="IsCodeLike">IsCodeLike</emu-xref>
   that treats strings for backwards compatibility but also returns *true* for
   some objects.
   See the options below for details of which objects are code-like.</li>
 <li>Tweaks <a href="https://tc39.github.io/ecma262#sec-performeval">PerformEval</a>
   to use IsCodeLike and to coerce the code to a string.</li>
</ul>


<h3>Problem 2: host callout does not receive type information</h3>

<p>Currently, the information available to the check is per-realm:</p>

<emu-alg>
  5. Perform ? HostEnsureCanCompileStrings(_callerRealm_, _calleeRealm_).
</emu-alg>

<p>This proposal aims to provide additional context to HostEnsureCanCompileStrings,
and reorder the steps in CreateDynamicFunction so that HostEnsureCanCompilerStrings
receives runtime type information.</p>

<ol>
<li>The production to use to parse the source text.
<li>The value of any parameters and source text before coercion to strings.
<li>A bit to distinguish between indirect and direct <code>eval</code>.
</ol>

<h3>Problem 3: host callout cannot adjust values</h3>

<p>In Trusted Types, the
<a href="https://wicg.github.io/trusted-types/dist/spec/#default-policy-hdr">default policy</a>'s
<a href="https://wicg.github.io/trusted-types/dist/spec/#callbackdef-createscriptcallback"
 >`createScript` callback</a> returns a value that is used in place of the input.
For example, if the default policy's `createScript` callback returns `"output"` given
`"input"` then `eval("input")` would load and run a |ScriptBody| parsed from the source text
`output`.
</p>

<pre><code class="html">
&lt;meta http-equiv="Content-Security-Policy" content="trusted-types default" /&gt;
&lt;script&gt;
// Define a default policy that maps the source text `input` to `output`.
TrustedTypes.createPolicy(
  'default',
  {
    createScript(code) {
      if (code === 'input') { return 'output'; }
      throw new Error('blocked script execution');
    },
  });

globalThis.input = 1;
globalThis.output = 2;
// The source text loaded is `output`
eval('input') === globalThis.output;  // true
&lt;/script&gt;
</code></pre>

<p>This proposal adjusts callers of the callback to expect a result and to use it in place
of the inputs.</p>

<h3>Problem 4: host callout doesn't pass the code to check</h3>

<p><a href="https://tc39.es/ecma262/#sec-hostensurecancompilestrings">HostEnsureCanCompileStrings</a>
callout only passes the realms to the host environment. In the web platform,
that callout is hooked to the <a href="https://w3c.github.io/webappsec-csp/#should-block-inline">Content Security Policy algorithms</a>,
which operate on <em>code</em> that is to be executed - e.g. a script body, or
a function body, both to determine if the specific string is allowed to be executed
(e.g. <a href="https://w3c.github.io/webappsec-csp/#match-element-to-source-list">based on its hash</a>), and to <a href="https://w3c.github.io/webappsec-csp/#security-violation-reports">report violations</a>.
As such, some implementations (v8 and SpiderMonkey) actually also pass the code string
to the host, and in the case of <code>new Function()</code> perform the callout
later in <a href="https://tc39.es/ecma262/#sec-createdynamicfunction">CreateDynamicFunction</a>,
after the function body is assembled.
</p>
<p>This proposal updates the host callout to contain the script to be executed, and move the callout in CreateDynamicFunction after the function body is assembled.</p>

<h2>Changes to HostEnsureCanCompileStrings</h2>

<emu-clause id="sec-hostbeforecompilevalue">
  <h1><del>HostEnsureCanCompileStrings</del> <ins>HostBeforeCompileValue</ins> ( _callerRealm_, _calleeRealm_<ins>, _goal_, _args_</ins>)</h1>

  <p><del>HostEnsureCanCompileStrings</del> <ins>HostBeforeCompileValue</ins> is an implementation-defined abstract operation that allows host environments to block certain ECMAScript functions which allow developers to compile strings into ECMAScript code.</p>

  <p>An implementation
  of <del>HostEnsureCanCompileStrings</del> <ins>HostBeforeCompileValue</ins>
  may complete normally or abruptly. Any abrupt completions will be
  propagated to its callers. The default implementation
  of <del>HostEnsureCanCompileStrings</del> <ins>HostBeforeCompileValue</ins>
  is to unconditionally return <del>an empty</del> <ins>a</ins> normal
  completion <ins>with a value of _args_</ins>.</p>

  <p><ins>_args_ must be a list of values.</ins></p>

  <p><ins>Any normal completion value from HostBeforeCompileValue must
  be a list of values.</ins></p>

  <p><ins>Any normal completion value from HostBeforeCompileValue
  should be used by callers in place of the input _args_.</ins></p>

  <emu-note><ins>For `eval` _args_ will have a single element, the
  source to evaluate.  For MakeDynamicFunction it may have any number
  of elements that are joined on comma to form source text for
  |FormalParameters| followed by a body.</ins></emu-note>

  <emu-note><ins>_goal_ is the production which will be used to parse
  the last element of _args_.  For example, if called via %Function%
  it might be the grammar symbol |FunctionBody[~Yield, ~Await]| and
  from %eval% it might be the grammar symbol
  |Script|.</ins></emu-note>

  <p><ins>Implementations that stringify any element _i_ of _args_ where
  _i_ &ne; 0 must stringify _args_[_i_-1] before stringifying _args_[_i_].</ins></p>

  <p><ins>Implementations that stringify any element of _args_ should return
  the stringified result in place of that element where that element informs
  part of the output.</ins></p>

  <emu-note><ins><p>This avoids visible side-effects due to multiple
  stringification of user-defined objects as in:</p>

  <pre><code class="javascript">
  new Function(
    {
      toString() {
        console.log('parameter stringified');
        return 'x, y';
      }
    },
    {
      toString() {
        console.log('body stringified');
        return 'x + y';
      }
    });
  </code></pre></ins></emu-note>

  <p><ins>Implementations must return a single element list when _args_ has
  a single element and _goal_ is *ScriptBody*.</ins></p>

  <emu-note><ins>This avoids complicating PerformEval.</ins></emu-note>
</emu-clause>

<h2>Changes to CreateDynamicFunction</h2>

<p>CreateDynamicFunction now waits until after it figures out what _kind_
of function it is creating and uses the result of the adjusted host
callout.</p>

<emu-clause id="sec-createdynamicfunction-new">
  <h1>Runtime Semantics: CreateDynamicFunction ( _constructor_, _newTarget_, _kind_, _args_ )</h1>
  <p>The abstract operation CreateDynamicFunction is called with arguments _constructor_, _newTarget_, _kind_, and _args_. _constructor_ is the constructor function that is performing this action, _newTarget_ is the constructor that `new` was initially applied to, _kind_ is either `"normal"`, `"generator"`, `"async"`, or `"async generator"`, and _args_ is a List containing the actual argument values that were passed to _constructor_. The following steps are taken:</p>
  <emu-alg>
    1. Assert: The execution context stack has at least two elements.
    1. Let _callerContext_ be the second to top element of the execution context stack.
    1. Let _callerRealm_ be _callerContext_'s Realm.
    1. Let _calleeRealm_ be the current Realm Record.
    1. <del>Perform ? HostEnsureCanCompileStrings(_callerRealm_, _calleeRealm_).</del>
    1. If _newTarget_ is *undefined*, set _newTarget_ to _constructor_.
    1. If _kind_ is `"normal"`, then
      1. Let _goal_ be the grammar symbol |FunctionBody[~Yield, ~Await]|.
      1. Let _parameterGoal_ be the grammar symbol |FormalParameters[~Yield, ~Await]|.
      1. Let _fallbackProto_ be `"%FunctionPrototype%"`.
    1. Else if _kind_ is `"generator"`, then
      1. Let _goal_ be the grammar symbol |GeneratorBody|.
      1. Let _parameterGoal_ be the grammar symbol |FormalParameters[+Yield, ~Await]|.
      1. Let _fallbackProto_ be `"%Generator%"`.
    1. Else if _kind_ is `"async"`, then
      1. Let _goal_ be the grammar symbol |AsyncFunctionBody|.
      1. Let _parameterGoal_ be the grammar symbol |FormalParameters[~Yield, +Await]|.
      1. Let _fallbackProto_ be `"%AsyncFunctionPrototype%"`.
    1. Else,
      1. Assert: _kind_ is `"async generator"`.
      1. Let _goal_ be the grammar symbol |AsyncGeneratorBody|.
      1. Let _parameterGoal_ be the grammar symbol |FormalParameters[+Yield, +Await]|.
      1. Let _fallbackProto_ be `"%AsyncGenerator%"`.
    1. <ins>Set _args_ to ! <b>HostBeforeCompileValue</b>(_callerRealm_, _calleeRealm_, <b>_goal_, _args_</b>).</ins>
    1. Let _argCount_ be the number of elements in _args_.
    1. ...
  </emu-alg>
</emu-clause>

<h2>Changes to PerformEval</h2>

<p>PerformEval now:</p>

<ul>
  <li>uses the new algorithm, IsCodeLike, instead of checking whether _x_ is a string, and</li>
  <li>uses the adjusted host callout and finds the source text in its result.</li>
</ul>

<emu-clause id="sec-performeval" aoid="PerformEval">
  <h1>Runtime Semantics: PerformEval ( _x_, _callerRealm_, _strictCaller_, _direct_ )</h1>
  <p>The abstract operation PerformEval with arguments _x_, _callerRealm_, _strictCaller_, and _direct_ performs the following steps:</p>
  <emu-alg>
    1. Assert: If _direct_ is *false*, then _strictCaller_ is also *false*.
    1. If <del>Type(_x_) is not String</del> <ins>IsCodeLike(_x_) is *false*</ins>, return _x_.
    1. Let _evalRealm_ be the current Realm Record.
    1. <ins>Let _args_ be a list containing only _x_.</ins>
    1. <del>Perform ? HostEnsureCanCompileStrings(_callerRealm_, _calleeRealm_).</del><br>
       <ins>Set _args_ to ! HostBeforeCompileValue(_callerRealm_, _calleeRealm_, |Script|, _args_).</ins>
    1. <ins>Set _x_ to ? Get(_args_, 0).</ins>
    1. ...
  </emu-alg>

<emu-clause id="sec-iscodelike" aoid="IsCodeLike">
  <h1><ins>Runtime Semantics: IsCodeLike ( _x_ )</ins></h1>
  <emu-note>There is no way for user code to define code-like values unless
the host additionally provides API that affects the [[CodeLike]] internal
slot. Proxies over code-like values are not themselves code-like.
</emu-note>
  <p><ins>The abstract operation IsCodeLike with argument _x_ performs the following steps:</ins></p>
  <emu-alg>
    1. <ins>If Type(_x_) is String, return *true*.</ins>
    1. <ins>If Type(_x_) is Object, then</ins>
      1. <ins>If _x_ has a [[CodeLike]] internal slot, then return *true*.
    1. <ins>Return *false*.</ins>
  </emu-alg>
</emu-clause>